<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    
    
    
</head>


<body>

    <span id=data></span>
    <script>
    
        
    // Random number generator with a seed
    // Kudos: https://stackoverflow.com/a/47593316/8369030 and https://gist.github.com/blixt/f17b47c62508be59987b
    function mulberry32(a) {
        var t = a += 0x6D2B79F5;
        t = Math.imul(t ^ t >>> 15, t | 1);
        t ^= t + Math.imul(t ^ t >>> 7, t | 61);
        return ((t ^ t >>> 14) >>> 0) / 4294967296;
    }


    function getTodaysTimestamp() {
        let now = new Date();
        return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0).getTime()/1000; 
    }


    function getFutureTimestamp(days) {
        return getTodaysTimestamp() + days * 60*60*24;
    }


    function getIndex(ts) {
        let rand = mulberry32(ts);
        let index = Math.floor(rand * targets.length);
    //     console.log("Todays Index: " + index);
        return index;
    }


    // Kudos: https://hellodevworld.com/365-days-of-coding/rot13-cipher-javascript-solution
    function rot13(message) {
        if ((message == "") || (message == null)) {
            return "";
        }
        return message.replace(/[a-z]/gi, letter => String.fromCharCode(letter.charCodeAt(0) + (letter.toLowerCase() <= 'm' ? 13 : -13)));
    }


    async function loadJSON(filename, callback) {
        var xobj = new XMLHttpRequest();
        xobj.overrideMimeType("application/json");
        xobj.open('GET', filename, true);
        xobj.onreadystatechange = function () {
            if (xobj.readyState == 4 && xobj.status == "200") {
            // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
            callback(xobj.responseText);
            }
        };
        xobj.send(null);
    }

    loadJSON("target-words.json", function(response) {
        targets = JSON.parse(response)["data"];
        main();
    });
    
    
    
    function main() {
    
    data = "";
    
        // get 30 next days
        for (var i = 0; i < 30; i++) {
            timestamp = getFutureTimestamp(i);
            
            const event = new Date(timestamp * 1000);
            const options = { weekday: 'short', month: 'short', day: 'numeric' };
            let dateFormated = event.toLocaleDateString('de-CH', options);

            
            
            
    //         "1645743600" => ["mjnat", 1915], // Fr., 25. Feb.
            data += "\"" + timestamp + "\" => [\"" + rot13(targets[getIndex(timestamp)]) + "\", " + getIndex(timestamp) + "], // " + dateFormated + "\n"
//             data += "\"" + timestamp + "\" => [\"" + (targets[getIndex(timestamp)]) + "\", " + getIndex(timestamp) + "], // " + dateFormated + "\n"
        }
        
        document.getElementById("data").innerText = data;
    }
   
    
    </script>
</body>

</html>
 
